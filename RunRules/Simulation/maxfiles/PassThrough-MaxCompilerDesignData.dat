#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "PassThrough"
#define MAXFILE_BUILD_DIR  "/tmp/PassThrough_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20231114
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 35)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PassThroughKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(PassThroughKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host)
MANAGER_NODE(result, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(PassThroughKernel, x, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PassThroughKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(result, result, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, Stream_8, input, 128)
MANAGER_STREAM(PassThroughKernel, result, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, result, result, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, PassThroughKernel, x, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(PassThroughKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(result, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PassThroughKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PassThroughKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PassThroughKernel, PassThroughKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(PassThroughKernel, x, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PassThroughKernel, result, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePushSourceSyncMax4, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PassThroughKernel, PassThroughKernel, "PassThroughKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(result, PCIePushSinkSyncMax3, "result")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 35)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "93a9a0ff8f8f636ef2422521afe55edf3be2dee490fd69f918e5071c3529885b")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PassThroughKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(result, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(PassThroughKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PassThroughKernel.io_result_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PassThroughKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PassThroughKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PassThroughKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(PassThroughKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(PassThroughKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(PassThroughKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(PassThroughKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(PassThroughKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(PassThroughKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(PassThroughKernel.dbg_fill_level, 0x15, 1, hwBits(5))
REG(PassThroughKernel.dbg_flush_level, 0x16, 1, hwBits(5))
REG(PassThroughKernel.dbg_flush_start, 0x17, 1, hwBits(1))
REG(PassThroughKernel.dbg_flush_start_level, 0x18, 1, hwBits(5))
REG(PassThroughKernel.dbg_flushing, 0x19, 1, hwBits(1))
REG(PassThroughKernel.dbg_full_level, 0x1a, 1, hwBits(5))
REG(PassThroughKernel.dbg_out_stall, 0x1b, 1, hwBits(1))
REG(PassThroughKernel.dbg_out_valid, 0x1c, 1, hwBits(1))
REG(PassThroughKernel.dbg_stall_vector, 0x1d, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(PassThroughKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PassThroughKernel.io_result_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PassThroughKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PassThroughKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_fill_level, 0x15, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_flush_level, 0x16, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_flush_start, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_flush_start_level, 0x18, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_flushing, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_full_level, 0x1a, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_out_stall, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_out_valid, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PassThroughKernel.dbg_stall_vector, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("93a9a0ff8f8f636ef2422521afe55edf3be2dee490fd69f918e5071c3529885b")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME PassThrough
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_PassThrough_H
#define SLIC_DECLARATIONS_PassThrough_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define PassThrough_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_N * 4) bytes.
 */
void PassThrough(
	int32_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_result);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *PassThrough_nonblock(
	int32_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_result);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const uint32_t *instream_x; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	uint32_t *outstream_result; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} PassThrough_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void PassThrough_run(
	max_engine_t *engine,
	PassThrough_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PassThrough_run_nonblock(
	max_engine_t *engine,
	PassThrough_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PassThrough_run_group(max_group_t *group, PassThrough_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PassThrough_run_group_nonblock(max_group_t *group, PassThrough_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PassThrough_run_array(max_engarray_t *engarray, PassThrough_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PassThrough_run_array_nonblock(max_engarray_t *engarray, PassThrough_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PassThrough_convert(max_file_t *maxfile, PassThrough_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* PassThrough_init(void);

/* Error handling functions */
int PassThrough_has_errors(void);
const char* PassThrough_get_errors(void);
void PassThrough_clear_errors(void);
/* Free statically allocated maxfile data */
void PassThrough_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int PassThrough_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int PassThrough_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_PassThrough_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PassThroughKernel, 15, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:25)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 16, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:25)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 0, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:21)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:21)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 2, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:21)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 36, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 31, NodeReinterpret, "<{HWOffsetFix:32, 2, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1003)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 32, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1003)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 33, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1003)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 41, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 5, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 42, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 6, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 34, NodeReinterpret, "<{HWOffsetFix:32, 2, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1003)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 35, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1003)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 9, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 45, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:983)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 11, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:983)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 12, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 13, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:22)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 18, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\npassthrough.PassThroughKernel.<init>(PassThroughKernel.maxj:25)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:20)\n")
PHOTON_NODE_DATA(PassThroughKernel, 23, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 44, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 20, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 21, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 22, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 24, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 43, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 26, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 27, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 29, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 30, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
PHOTON_NODE_DATA(PassThroughKernel, 28, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\npassthrough.PassThroughManager.main(PassThroughManager.maxj:24)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int PassThrough_has_errors(void)
{	return stored_has_error; }
const char* PassThrough_get_errors(void)
{	return stored_error; }
void PassThrough_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char PassThrough_use_simulation[16];
static void PassThrough_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(PassThrough_use_simulation, 16, "PassThro_%05ld_", pid);
}
static const char *PassThrough_check_use_simulation(void)
{
	PassThrough_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = PassThrough_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int PassThrough_simulation_launch = 0;
int PassThrough_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = PassThrough_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int PassThrough_simulator_stop(void)
{
	const char *use_sim = PassThrough_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void PassThrough_static_init(void) 
{
	stored_maxfile = PassThrough_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = PassThrough_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = PassThrough_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			PassThrough_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void PassThrough_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (PassThrough_simulation_launch == 1) {
		int sim_stat = PassThrough_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		PassThrough_simulation_launch = 0;
	}
}

static int PassThrough_get_pcie_alignment(void)
{
#ifdef PassThrough_PCIE_ALIGNMENT
	return ((PassThrough_PCIE_ALIGNMENT < 1) ? 16 : PassThrough_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int PassThrough_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = PassThrough_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *PassThrough_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = PassThrough_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct PassThrough_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} PassThrough_callback_stream_t;

typedef struct PassThrough_callback_data {
	PassThrough_callback_stream_t stream[2]; 
	int count;
	int max_count;
} PassThrough_callback_data_t;

static void PassThrough_callback_internal(void *cb_data)
{
	PassThrough_callback_data_t *data = (PassThrough_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		PassThrough_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* PassThrough_convert_internal(
	max_file_t *maxfile,
	PassThrough_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	PassThrough_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(PassThrough_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function PassThrough_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &PassThrough_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar PassThroughKernel.run_cycle_count */
	uint64_t ticks_PassThroughKernel = param_N;
	max_set_ticks(actions, "PassThroughKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar PassThroughKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream x */
	size_t instream_size_x = tmp_0;
	if (instream_size_x > 0) {
		const uint32_t *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == PassThrough_check_aligned(interface_actions->instream_x))) {
			uint32_t *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream result */
	size_t outstream_size_result = tmp_1;
	if (outstream_size_result > 0) {
		uint32_t *stream_ptr = interface_actions->outstream_result;
		if (use_callback && (1 == PassThrough_check_aligned(interface_actions->outstream_result))) {
			uint32_t *aligned_outstream_result = malloc(outstream_size_result);
			if (aligned_outstream_result == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'result'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_result;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_result;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_result;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_result;
		}
		max_queue_output(actions, "result", stream_ptr, outstream_size_result);
		CHECK_ERRORS;
	}
	/* end of code for stream result */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void PassThrough(
	int32_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_result)
{
	(void) pthread_once(&slic_bs_is_initialised, PassThrough_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = PassThrough_nonblock(param_N, instream_x, outstream_result);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PassThrough_nonblock(
	int32_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_result)
{
	PassThrough_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_x = instream_x;
	interface_actions.outstream_result = outstream_result;
	(void) pthread_once(&slic_bs_is_initialised, PassThrough_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PassThrough_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void PassThrough_run(
	max_engine_t *engine,
	PassThrough_actions_t *interface_actions)
{
	max_run_t *run = PassThrough_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PassThrough_run_nonblock(
	max_engine_t *engine,
	PassThrough_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PassThrough_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PassThrough_run_group(max_group_t *group, PassThrough_actions_t *interface_actions)
{
	max_run_t *run = PassThrough_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PassThrough_run_group_nonblock(max_group_t *group, PassThrough_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = PassThrough_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PassThrough_run_array(max_engarray_t *engarray, PassThrough_actions_t *interface_actions[])
{
	max_run_t *run = PassThrough_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PassThrough_run_array_nonblock(max_engarray_t *engarray, PassThrough_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = PassThrough_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PassThrough_convert(max_file_t *maxfile, PassThrough_actions_t *interface_actions)
{
	return PassThrough_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(PassThroughKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(x, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(result, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlBhc3NUaHJvdWdoLmgiIG5h
bWU9IlBhc3NUaHJvdWdoIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9Imxv
bmciIHZhbHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1l
PSJQYXNzVGhyb3VnaCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy46IE51bWJlciBvZiBkYXRhIGl0ZW1zIHRvIHByb2Nl
c3MiIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDMyX3QiLz48YXJy
YXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVz
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1feCIgc2l6ZT0iKHBhcmFtX04gKiA0
KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJ1aW50MzJfdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+
PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFs
dWU9IigocGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9y
IG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFy
YW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+
PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0i
VGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0
aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9yZXN1bHQiIHNpemU9IihwYXJhbV9OICogNCki
IHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0idWludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxs
ZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVl
PSIoKHBhcmFtX04gKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBv
cGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9OICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFt
X04iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5j
dGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwv
ZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2Vu
Z2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBQYXNzVGhyb3VnaF9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNf
ZXJyb3I7IH0KY29uc3QgY2hhciogUGFzc1Rocm91Z2hfZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVy
biBzdG9yZWRfZXJyb3I7IH0Kdm9pZCBQYXNzVGhyb3VnaF9jbGVhcl9lcnJvcnModm9pZCkKewoJ
ZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAwOwp9CgpzdGF0aWMgY2hhciBQYXNzVGhyb3VnaF91c2Vfc2ltdWxhdGlvblsxNl07CnN0
YXRpYyB2b2lkIFBhc3NUaHJvdWdoX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBp
ZCA9ICgobG9uZykgZ2V0cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYoUGFzc1Rocm91Z2hfdXNl
X3NpbXVsYXRpb24sIDE2LCAiUGFzc1Rocm9fJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3Qg
Y2hhciAqUGFzc1Rocm91Z2hfY2hlY2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJUGFzc1Rocm91
Z2hfZGVmX3VzZV9zaW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZp
Z19nZXRfc3RyaW5nKE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0g
TlVMTCkgewoJCXVzZV9zaW0gPSBQYXNzVGhyb3VnaF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29u
ZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9Cgly
ZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBQYXNzVGhyb3VnaF9zaW11bGF0aW9uX2xhdW5j
aCA9IDA7CmludCBQYXNzVGhyb3VnaF9zaW11bGF0b3Jfc3RhcnQodm9pZCkKewoJaW50IHJldHZh
bCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gUGFzc1Rocm91Z2hfY2hlY2tfdXNlX3NpbXVs
YXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNp
bXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEgLVMgc2lt
dXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJy
Iik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRv
IGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJ
cmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwp
IHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICov
CgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9y
IikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2Uo
cGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgUGFzc1Rocm91Z2hfc2ltdWxhdG9yX3N0
b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFBhc3NUaHJvdWdoX2NoZWNrX3VzZV9z
aW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFU
SD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1T
IHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAi
ciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0
byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJ
CXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxM
KSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAq
LwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7
CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgUGFzc1Rocm91Z2hfc3RhdGljX2luaXQodm9pZCkg
CnsKCXN0b3JlZF9tYXhmaWxlID0gUGFzc1Rocm91Z2hfaW5pdCgpOwoJaWYgKHN0b3JlZF9tYXhm
aWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkgewoJCXN0b3Jl
ZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RB
VElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJv
cigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFtYXhfb2sobWF4
X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9jb25maWdfZ2V0
X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkKCQltYXhf
ZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3QgdGltZW91dF9w
cmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsKCWNvbnN0IGNo
YXIgKnVzZV9zaW0gPSBQYXNzVGhyb3VnaF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1h
eF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1f
c3RhdCA9IFBhc3NUaHJvdWdoX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0g
MCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsK
CQkJUGFzc1Rocm91Z2hfc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9l
cnJvcigiRXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUg
c2ltdWxhdGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3Io
IkVycm9yOiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBz
ZXQgY29ycmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigi
RXJyb3I6IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlz
IHJ1bm5pbmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xv
YWQoc3RvcmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJy
b3JzKSkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxv
YWQgZW5naW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJv
cnQoKTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShz
dG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUp
OwoJCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2Fk
X3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgUGFzc1Ro
cm91Z2hfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3Vu
bG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9y
ZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJ
c3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJ
ZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoUGFzc1Ro
cm91Z2hfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFBhc3NUaHJv
dWdoX3NpbXVsYXRvcl9zdG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYo
c3RkZXJyLCAiRXJyb3Igc3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlQYXNzVGhyb3VnaF9z
aW11bGF0aW9uX2xhdW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgUGFzc1Rocm91Z2hfZ2V0X3Bj
aWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIFBhc3NUaHJvdWdoX1BDSUVfQUxJR05NRU5UCgly
ZXR1cm4gKChQYXNzVGhyb3VnaF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBQYXNzVGhyb3Vn
aF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50
IFBhc3NUaHJvdWdoX2NoZWNrX2FsaWduZWQoY29uc3Qgdm9pZCAqZGF0YSkKewoJdWludHB0cl90
IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRhOwoJaW50IGFsaWdubWVudCA9IFBhc3NUaHJvdWdo
X2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEg
OiAwOwp9CgpzdGF0aWMgdm9pZCAqUGFzc1Rocm91Z2hfbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6
ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBQYXNzVGhyb3VnaF9nZXRf
cGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZwdHIsIGFsaWdubWVudCwgc2l6ZSk7
CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
X1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykpIHsgaWYobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmlu
dGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyBhYm9ydCgp
OyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgcmV0
dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVFLCBNRVNTQUdFLCBSRVQpIGlmKFZB
TFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNf
SU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4lc1xuIiwg
KHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVkX2Vycm9yLCBNRVNTQUdFKTsgYWJv
cnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBSRVQ7IH0KCiAKdHlwZWRlZiBzdHJ1
Y3QgUGFzc1Rocm91Z2hfY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWlu
dDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9
IFBhc3NUaHJvdWdoX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgUGFzc1Rocm91
Z2hfY2FsbGJhY2tfZGF0YSB7CglQYXNzVGhyb3VnaF9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1b
Ml07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBQYXNzVGhyb3VnaF9jYWxsYmFja19k
YXRhX3Q7CgpzdGF0aWMgdm9pZCBQYXNzVGhyb3VnaF9jYWxsYmFja19pbnRlcm5hbCh2b2lkICpj
Yl9kYXRhKQp7CglQYXNzVGhyb3VnaF9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoUGFzc1Rocm91
Z2hfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEt
PmNvdW50IDsgaSsrICkgewoJCVBhc3NUaHJvdWdoX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRh
dGEtPnN0cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJ
bWVtY3B5KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUo
cy0+YWxpZ25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3Qq
IFBhc3NUaHJvdWdoX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJUGFz
c1Rocm91Z2hfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxf
Y2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2Rh
dGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUs
IE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tf
RVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUo
bWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJUGFz
c1Rocm91Z2hfY2FsbGJhY2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJh
Y2sgPSAoY2FsbGJhY2tfZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsK
CWlmICh1c2VfY2FsbGJhY2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihQYXNzVGhyb3Vn
aF9jYWxsYmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYo
c3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRh
dGEgaW4gZnVuY3Rpb24gUGFzc1Rocm91Z2hfY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVy
biBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAg
ICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAg
ICAgPSAmUGFzc1Rocm91Z2hfY2FsbGJhY2tfaW50ZXJuYWw7Cgl9CgoJaW50MzJfdCBwYXJhbV9O
ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX047CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBQYXNz
VGhyb3VnaEtlcm5lbC5ydW5fY3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX1Bhc3NUaHJv
dWdoS2VybmVsID0gcGFyYW1fTjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIlBhc3NUaHJvdWdo
S2VybmVsIiwgcGFyYW1fTik7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2Nh
bGFyIFBhc3NUaHJvdWdoS2VybmVsLnJ1bl9jeWNsZV9jb3VudCovCgkKCWludDY0X3QgdG1wXzAg
PSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geCAqLwoJc2l6ZV90IGluc3Ry
ZWFtX3NpemVfeCA9IHRtcF8wOwoJaWYgKGluc3RyZWFtX3NpemVfeCA+IDApIHsKCQljb25zdCB1
aW50MzJfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV94OwoJCWlm
ICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gUGFzc1Rocm91Z2hfY2hlY2tfYWxpZ25lZChpbnRlcmZh
Y2VfYWN0aW9ucy0+aW5zdHJlYW1feCkpKSB7CgkJCXVpbnQzMl90ICphbGlnbmVkX2luc3RyZWFt
X3ggPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV94KTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1feCA9
PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJ
TEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBm
b3Igc3RyZWFtICd4JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1feDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1feDsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXpl
X3g7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0g
MDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1feCwg
aW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gsIGluc3RyZWFtX3NpemVfeCk7CgkJCXN0cmVh
bV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3g7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25z
LCAieCIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeCk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJ
LyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB4ICovCgkKCWludDY0X3QgdG1wXzEgPSAocGFyYW1f
TiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gcmVzdWx0ICovCglzaXplX3Qgb3V0c3RyZWFt
X3NpemVfcmVzdWx0ID0gdG1wXzE7CglpZiAob3V0c3RyZWFtX3NpemVfcmVzdWx0ID4gMCkgewoJ
CXVpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9yZXN1
bHQ7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBQYXNzVGhyb3VnaF9jaGVja19hbGlnbmVk
KGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0KSkpIHsKCQkJdWludDMyX3QgKmFs
aWduZWRfb3V0c3RyZWFtX3Jlc3VsdCA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9yZXN1bHQpOwoJ
CQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fcmVzdWx0ID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRf
ZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFp
bGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ3Jlc3VsdCciKTsKCQkJ
CUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9y
ZXN1bHQ7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRy
ID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9yZXN1bHQ7CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3NpemVfcmVzdWx0
OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7
CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVh
bV9yZXN1bHQ7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgInJlc3VsdCIsIHN0cmVh
bV9wdHIsIG91dHN0cmVhbV9zaXplX3Jlc3VsdCk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5k
IG9mIGNvZGUgZm9yIHN0cmVhbSByZXN1bHQgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9k
YXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19m
dW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBD
SEVDS19FUlJPUlMKfQoKdm9pZCBQYXNzVGhyb3VnaCgKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0
IHVpbnQzMl90ICppbnN0cmVhbV94LAoJdWludDMyX3QgKm91dHN0cmVhbV9yZXN1bHQpCnsKCSh2
b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIFBhc3NUaHJvdWdoX3N0
YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3Qg
bG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gUGFzc1Rocm91Z2hfbm9uYmxvY2socGFyYW1f
TiwgaW5zdHJlYW1feCwgb3V0c3RyZWFtX3Jlc3VsdCk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJs
ZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlBhc3NU
aHJvdWdoX25vbmJsb2NrKAoJaW50MzJfdCBwYXJhbV9OLAoJY29uc3QgdWludDMyX3QgKmluc3Ry
ZWFtX3gsCgl1aW50MzJfdCAqb3V0c3RyZWFtX3Jlc3VsdCkKewoJUGFzc1Rocm91Z2hfYWN0aW9u
c190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fTiA9IHBhcmFt
X047CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV94ID0gaW5zdHJlYW1feDsKCWludGVyZmFj
ZV9hY3Rpb25zLm91dHN0cmVhbV9yZXN1bHQgPSBvdXRzdHJlYW1fcmVzdWx0OwoJKHZvaWQpIHB0
aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgUGFzc1Rocm91Z2hfc3RhdGljX2lu
aXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQi
LCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEg
ICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gUGFzc1Rocm91Z2hfY29u
dmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2Jf
ZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFj
dGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChh
Y3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1h
eF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRh
KTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglD
SEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMp
OwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBQYXNzVGhyb3VnaF9ydW4oCgltYXhfZW5naW5lX3QgKmVu
Z2luZSwKCVBhc3NUaHJvdWdoX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9y
dW5fdCAqcnVuID0gUGFzc1Rocm91Z2hfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4
X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpQYXNzVGhyb3VnaF9ydW5fbm9uYmxvY2soCgltYXhf
ZW5naW5lX3QgKmVuZ2luZSwKCVBhc3NUaHJvdWdoX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdp
bmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAg
ICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gUGFzc1Rocm91Z2hfY29udmVy
dF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9k
YXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVM
TCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVM
TCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhf
cnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJ
Q0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rp
b25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBy
dW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4K
ICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRd
IGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMg
b24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBQYXNz
VGhyb3VnaF9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBQYXNzVGhyb3VnaF9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFBhc3NUaHJvdWdoX3J1
bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChy
dW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgog
KiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24g
Zm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlv
bnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQg
cmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVj
a2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlz
IHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0
aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFu
YXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUg
b24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBv
ZiBlcnJvci4KICovCm1heF9ydW5fdCAqUGFzc1Rocm91Z2hfcnVuX2dyb3VwX25vbmJsb2NrKG1h
eF9ncm91cF90ICpncm91cCwgUGFzc1Rocm91Z2hfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXAp
OwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFBhc3NUaHJvdWdoX2NvbnZlcnRfaW50ZXJuYWwo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9
PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJu
IE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5f
Z3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25z
KTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0
aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtp
bl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91
dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBS
dW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVu
Z3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJy
YXkuCiAqLwp2b2lkIFBhc3NUaHJvdWdoX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJy
YXksIFBhc3NUaHJvdWdoX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1
bl90ICpydW4gPSBQYXNzVGhyb3VnaF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVy
ZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwg
KTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4K
ICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJy
YXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBp
bnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUg
c3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3Ig
OjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQs
IHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0g
W2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5d
IGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVy
biBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVM
TCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpQYXNzVGhyb3VnaF9ydW5fYXJyYXlf
bm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBQYXNzVGhyb3VnaF9hY3Rpb25zX3Qg
KmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJy
YXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFj
dGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYg
KGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rp
b25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglm
b3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnMgPSBQYXNzVGhyb3VnaF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFj
ZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1
cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0
YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25v
bmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+
c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9h
Y3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1
Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBO
b3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3Ro
ZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBt
YXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlv
bnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUg
ZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJv
ci4KICovCm1heF9hY3Rpb25zX3QqIFBhc3NUaHJvdWdoX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4
ZmlsZSwgUGFzc1Rocm91Z2hfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJu
IFBhc3NUaHJvdWdoX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMs
IDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19O
VUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PassThroughKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PassThroughKernel, 28, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302d02150093396fbf2e3b68d7e2b0f3b98510fdaff69c66a6021418f3aa55d9546795fb1dfbbee33d9289223d841c")
#endif

